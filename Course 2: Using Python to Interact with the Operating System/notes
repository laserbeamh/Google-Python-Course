Creating python modules:
it seems to literally just be a separate python file
e.g.:
cat areas.py
import math

def triangle(base, height):
	return base*height/2

def rectangle(base, height):
	return base*height
	
def circle(radius):
	return math.pi*(radius**2)

cat other_file
import areas

if the module is large, create a directory with the name of the module with separate .py submodules
	will need an __init__.py module
	
pitfalls of automation
	have to write the script

typically want to script out complex tasks so errors aren't made

Pareto Principle: 20% of the sysadmin tasks you perform are responsible for 80% of your work

bit-rot = process of software falling out of step with the env

don't have false confidence in automation
build in notification for automation errors
build in errors for the log

test automation periodically

check the health of the computer
shutil module (disk usage)
psutil module (CPU usage)

file = open("/path/to/file name")

file descriptor - a toke, generated by the OS that allows programs to do more operations with the file - saved as attribute

file.open()
file.readline() <- reads one line at a time
file.read() <- reads from current position to the end
file.close()

open-use-close
with open(filename) as file:
	print(file.readline)
	
with closes for you automatically, but only good if working with one file at a time. open() allows you to use the same file in other parts of the script

files can be iterated through
newline characters not removed when iterating, so there will be an empty line between lines - use strip() to remove
e.g.:
with open("spider.txt") as file:
	for line in file:
		print(line.strip().upper())

can readlines into a list

file = open("spider.txt")
lines = file.readlines()
file.close()
lines.sort()

using read or readlines to read a file into a variable can take a lot of memory - better to go line by line for big files

r(ead),w(rite),a(ppend),r+(read+write),b(inary), etc.
if you open an existing file in write mode it will delete the contents of the file

to write to a file (e.g)
with open("novel.txt", "w") as file:
	file.write("It was a dark and stormy night")
	
os module is an abstraction module that allows for portability
	however, paths are different across OSes, so need to provide alternatives for the platforms we want to support

os.remove("file")
os.rename("old_name","new_name")
***os.path submodule***
os.path.exists("file")
	super helpful to avoid writing to a file that already exists

os.path.isfile("file")
os.path.getsize("file")
os.path.getmtime("file") - gives timestamp in Unix time (seconds since jan, 1, 1970)

import datetime
timestamp = os.path.getmtime("file")
datetime.datetime.fromtimestamp(timestamp) 
^^gives us time in human readable time 
adding .date() to fromtimestamp gives just YYYY-MM-DD

can use relative and absolute paths

os.path.abspath("file") gives us the full path

os.getcwd()
os.mkdir("name")
os.chdir("target_dir")
os.rmdir("name") -- only if empty
os.listdir("name") -- like ls
os.path.isdir("name")

dir = <directory>
for name in os.listdir(dir):
	fullname = os.path.join(dir,name)
	if os.path.isdir(filename):
		print("{} is a directory".format(fullname))
	else:
		print("{} is a file".format(fullname))

need to use os.path.join because of windows and the \ in their paths

parsing - analyzing file contents to correctly structure data

#####using csv#####
import csv
file = open("csv_file.txt")
csv_file = csv.reader(file)
for row in csv_file:
	name, phone, role = row
	print("Name: {}, Phone: {}, Role: {}".format(name,phone,role))
file.close()

#########
hosts = [[machine,ip],[machine,ip]]
with open("hosts.csv", "w") as hosts_csv:
	writer = csv.writer(hosts_csv)
	writer.writerows(hosts)

##############
.writerow() will write line by line 
.writerows() will write all lines

for csvs with a lot of columns, it's common to have the first row be the column names - read this with ditreader

with open("software.csv") as software:
	reader = csv.DictReader(software)
	for row in reader:
		print(("{} has {} users").format(row["name"], row["users"]))
###		
DictWriter to generate csv file from the contents of a list of dictionaries
	each element in the list will be a row in the file
	the values of each field will come out of each of the dictionaries
	also need to pass a list of the keys we want to be stored
###
.writeheader()
.writerows()	

https://realpython.com/python-csv/
